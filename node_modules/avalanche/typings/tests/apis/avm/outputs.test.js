"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("src/utils/bintools"));
const outputs_1 = require("src/apis/avm/outputs");
const output_1 = require("src/common/output");
const outputs_2 = require("../../../src/apis/avm/outputs");
const bintools = bintools_1.default.getInstance();
describe('Outputs', () => {
    describe('NFTMintOutput', () => {
        let addrs = [
            bintools.cb58Decode("B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW"),
            bintools.cb58Decode("P5wdRuZeaDt28eHMP5S3w9ZdoBfo7wuzF"),
            bintools.cb58Decode("6Y3kysjF9jnHnYkdS9yGAuoHyae2eNmeV")
        ].sort();
        let locktime = new bn_js_1.default(54321);
        let addrpay = [addrs[0], addrs[1]];
        let fallLocktime = locktime.add(new bn_js_1.default(50));
        test('SelectOutputClass', () => {
            let goodout = new outputs_1.NFTMintOutput(0, addrpay, fallLocktime, 1);
            let outpayment = outputs_1.SelectOutputClass(goodout.getOutputID());
            expect(outpayment).toBeInstanceOf(outputs_1.NFTMintOutput);
            expect(() => {
                outputs_1.SelectOutputClass(99);
            }).toThrow("Error - SelectOutputClass: unknown outputid");
        });
        test('comparator', () => {
            let outpayment1 = new outputs_1.NFTMintOutput(1, addrs, fallLocktime, 1);
            let outpayment2 = new outputs_1.NFTMintOutput(2, addrs, fallLocktime, 1);
            let outpayment3 = new outputs_1.NFTMintOutput(0, addrs, fallLocktime, 1);
            let cmp = output_1.Output.comparator();
            expect(cmp(outpayment1, outpayment1)).toBe(0);
            expect(cmp(outpayment2, outpayment2)).toBe(0);
            expect(cmp(outpayment3, outpayment3)).toBe(0);
            expect(cmp(outpayment1, outpayment2)).toBe(-1);
            expect(cmp(outpayment1, outpayment3)).toBe(1);
        });
        test('Functionality', () => {
            let out = new outputs_1.NFTMintOutput(0, addrs, fallLocktime, 3);
            expect(out.getOutputID()).toBe(10);
            expect(JSON.stringify(out.getAddresses().sort())).toStrictEqual(JSON.stringify(addrs.sort()));
            expect(out.getThreshold()).toBe(3);
            // expect(out.getLocktime().toNumber()).toBe(locktime.toNumber());
            let r = out.getAddressIdx(addrs[2]);
            expect(out.getAddress(r)).toStrictEqual(addrs[2]);
            expect(() => {
                out.getAddress(400);
            }).toThrow();
            let b = out.toBuffer();
            expect(out.toString()).toBe(bintools.bufferToB58(b));
            let s = out.getSpenders(addrs);
            expect(JSON.stringify(s.sort())).toBe(JSON.stringify(addrs.sort()));
            let m1 = out.meetsThreshold([addrs[0]]);
            expect(m1).toBe(false);
            let m2 = out.meetsThreshold(addrs, new bn_js_1.default(100));
            expect(m2).toBe(false);
            let m3 = out.meetsThreshold(addrs);
            expect(m3).toBe(true);
            let m4 = out.meetsThreshold(addrs, locktime.add(new bn_js_1.default(100)));
            expect(m4).toBe(true);
        });
    });
    describe('SECPTransferOutput', () => {
        let addrs = [
            bintools.cb58Decode("B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW"),
            bintools.cb58Decode("P5wdRuZeaDt28eHMP5S3w9ZdoBfo7wuzF"),
            bintools.cb58Decode("6Y3kysjF9jnHnYkdS9yGAuoHyae2eNmeV")
        ].sort();
        let locktime = new bn_js_1.default(54321);
        let addrpay = [addrs[0], addrs[1]];
        let fallLocktime = locktime.add(new bn_js_1.default(50));
        test('SelectOutputClass', () => {
            let goodout = new outputs_1.SECPTransferOutput(new bn_js_1.default(2600), addrpay, fallLocktime, 1);
            let outpayment = outputs_1.SelectOutputClass(goodout.getOutputID());
            expect(outpayment).toBeInstanceOf(outputs_1.SECPTransferOutput);
            expect(() => {
                outputs_1.SelectOutputClass(99);
            }).toThrow("Error - SelectOutputClass: unknown outputid");
        });
        test('comparator', () => {
            let outpayment1 = new outputs_1.SECPTransferOutput(new bn_js_1.default(10000), addrs, locktime, 3);
            let outpayment2 = new outputs_1.SECPTransferOutput(new bn_js_1.default(10001), addrs, locktime, 3);
            let outpayment3 = new outputs_1.SECPTransferOutput(new bn_js_1.default(9999), addrs, locktime, 3);
            let cmp = output_1.Output.comparator();
            expect(cmp(outpayment1, outpayment1)).toBe(0);
            expect(cmp(outpayment2, outpayment2)).toBe(0);
            expect(cmp(outpayment3, outpayment3)).toBe(0);
            expect(cmp(outpayment1, outpayment2)).toBe(-1);
            expect(cmp(outpayment1, outpayment3)).toBe(1);
        });
        test('SECPTransferOutput', () => {
            let out = new outputs_1.SECPTransferOutput(new bn_js_1.default(10000), addrs, locktime, 3);
            expect(out.getOutputID()).toBe(7);
            expect(JSON.stringify(out.getAddresses().sort())).toStrictEqual(JSON.stringify(addrs.sort()));
            expect(out.getThreshold()).toBe(3);
            expect(out.getLocktime().toNumber()).toBe(locktime.toNumber());
            let r = out.getAddressIdx(addrs[2]);
            expect(out.getAddress(r)).toStrictEqual(addrs[2]);
            expect(() => {
                out.getAddress(400);
            }).toThrow();
            expect(out.getAmount().toNumber()).toBe(10000);
            let b = out.toBuffer();
            expect(out.toString()).toBe(bintools.bufferToB58(b));
            let s = out.getSpenders(addrs);
            expect(JSON.stringify(s.sort())).toBe(JSON.stringify(addrs.sort()));
            let m1 = out.meetsThreshold([addrs[0]]);
            expect(m1).toBe(false);
            let m2 = out.meetsThreshold(addrs, new bn_js_1.default(100));
            expect(m2).toBe(false);
            let m3 = out.meetsThreshold(addrs);
            expect(m3).toBe(true);
            let m4 = out.meetsThreshold(addrs, locktime.add(new bn_js_1.default(100)));
            expect(m4).toBe(true);
        });
        test('SECPMintOutput', () => {
            let out = new outputs_2.SECPMintOutput(addrs, locktime, 3);
            expect(out.getOutputID()).toBe(6);
            expect(JSON.stringify(out.getAddresses().sort())).toStrictEqual(JSON.stringify(addrs.sort()));
            expect(out.getThreshold()).toBe(3);
            expect(out.getLocktime().toNumber()).toBe(locktime.toNumber());
            let r = out.getAddressIdx(addrs[2]);
            expect(out.getAddress(r)).toStrictEqual(addrs[2]);
            expect(() => {
                out.getAddress(400);
            }).toThrow();
            let b = out.toBuffer();
            expect(out.toString()).toBe(bintools.bufferToB58(b));
            let s = out.getSpenders(addrs);
            expect(JSON.stringify(s.sort())).toBe(JSON.stringify(addrs.sort()));
            let m1 = out.meetsThreshold([addrs[0]]);
            expect(m1).toBe(false);
            let m2 = out.meetsThreshold(addrs, new bn_js_1.default(100));
            expect(m2).toBe(false);
            let m3 = out.meetsThreshold(addrs);
            expect(m3).toBe(true);
            let m4 = out.meetsThreshold(addrs, locktime.add(new bn_js_1.default(100)));
            expect(m4).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,