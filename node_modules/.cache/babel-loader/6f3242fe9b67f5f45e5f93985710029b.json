{"ast":null,"code":"var _jsxFileName = \"/Users/sigterm9kill/Projects/twitter-clone/src/components/posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport PostModel from '../../models/PostModel';\nimport { useState, useEffect } from 'react';\nimport Post from './Post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Posts(props) {\n  _s();\n\n  const [loadedPosts, setLoadedPosts] = useState([]);\n  const [socketConnected, setSocketConnected] = useState(false);\n\n  const loadPosts = async () => {\n    const posts = await PostModel.timeline();\n    setLoadedPosts(posts);\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, []);\n  useEffect(() => {\n    if (loadedPosts.length > 0 && !socketConnected) {\n      const url = 'wss://api2.aleph.im/api/ws0/messages?contentTypes=techmaker-posts';\n      /* need to update with my organizational endpoint ~ aleph */\n\n      const connection = new WebSocket(url);\n\n      connection.onmessage = e => {\n        let post = JSON.parse(e.data);\n\n        if (post.item_content && post.content.type == 'techmaker-posts') {\n          if (post.content.address == props.walletAddress) {\n            props.setModalOpen(false);\n          }\n\n          const hash = post.item_hash;\n          const alreadyLoaded = loadedPosts.some(element => {\n            return element.item_hash == hash;\n          });\n\n          if (!alreadyLoaded) {\n            setLoadedPosts(previousPosts => [post, ...previousPosts]);\n          }\n        }\n      };\n\n      setSocketConnected(true);\n    }\n  }, [loadedPosts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: loadedPosts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post,\n      truncateAddress: props.truncateAddress,\n      timeSince: props.timeSince\n    }, post.item_hash, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 35\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Posts, \"rpGbdFGYwUSH4V8Jp6m1XJ8iIu0=\");\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/sigterm9kill/Projects/twitter-clone/src/components/posts/Posts.js"],"names":["PostModel","useState","useEffect","Post","Posts","props","loadedPosts","setLoadedPosts","socketConnected","setSocketConnected","loadPosts","posts","timeline","length","url","connection","WebSocket","onmessage","e","post","JSON","parse","data","item_content","content","type","address","walletAddress","setModalOpen","hash","item_hash","alreadyLoaded","some","element","previousPosts","map","truncateAddress","timeSince"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AAEpB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;;AAEA,QAAMS,SAAS,GAAG,YAAY;AAC5B,UAAMC,KAAK,GAAG,MAAMX,SAAS,CAACY,QAAV,EAApB;AACAL,IAAAA,cAAc,CAACI,KAAD,CAAd;AACD,GAHD;;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAMAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,WAAW,CAACO,MAAZ,GAAqB,CAArB,IAA0B,CAACL,eAA/B,EAAgD;AAC9C,YAAMM,GAAG,GAAG,mEAAZ;AACA;;AAEA,YAAMC,UAAU,GAAG,IAAIC,SAAJ,CAAcF,GAAd,CAAnB;;AAEAC,MAAAA,UAAU,CAACE,SAAX,GAAwBC,CAAD,IAAO;AAC5B,YAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,IAAb,CAAX;;AACA,YAAIH,IAAI,CAACI,YAAL,IAAqBJ,IAAI,CAACK,OAAL,CAAaC,IAAb,IAAqB,iBAA9C,EAAiE;AAE/D,cAAIN,IAAI,CAACK,OAAL,CAAaE,OAAb,IAAwBrB,KAAK,CAACsB,aAAlC,EAAiD;AAC/CtB,YAAAA,KAAK,CAACuB,YAAN,CAAmB,KAAnB;AACD;;AAED,gBAAMC,IAAI,GAAGV,IAAI,CAACW,SAAlB;AAEA,gBAAMC,aAAa,GAAGzB,WAAW,CAAC0B,IAAZ,CAAkBC,OAAD,IAAa;AAClD,mBAAOA,OAAO,CAACH,SAAR,IAAqBD,IAA5B;AACD,WAFqB,CAAtB;;AAIA,cAAI,CAACE,aAAL,EAAoB;AAClBxB,YAAAA,cAAc,CAAC2B,aAAa,IAAI,CAACf,IAAD,EAAO,GAAGe,aAAV,CAAlB,CAAd;AACD;AACF;AACF,OAlBD;;AAoBAzB,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;AACF,GA7BQ,EA6BN,CAACH,WAAD,CA7BM,CAAT;AA+BA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cAEIA,WAAW,CAAC6B,GAAZ,CAAiBhB,IAAD,iBAAU,QAAC,IAAD;AAA2B,MAAA,IAAI,EAAEA,IAAjC;AAAuC,MAAA,eAAe,EAAEd,KAAK,CAAC+B,eAA9D;AAA+E,MAAA,SAAS,EAAE/B,KAAK,CAACgC;AAAhG,OAAWlB,IAAI,CAACW,SAAhB;AAAA;AAAA;AAAA;AAAA,YAA1B;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GArDQ1B,K;;KAAAA,K;AAuDT,eAAeA,KAAf","sourcesContent":["import PostModel from '../../models/PostModel'\nimport { useState, useEffect } from 'react'\n\nimport Post from './Post'\n\nfunction Posts(props) {\n\n  const [loadedPosts, setLoadedPosts] = useState([])\n  const [socketConnected, setSocketConnected] = useState(false)\n\n  const loadPosts = async () => {\n    const posts = await PostModel.timeline()\n    setLoadedPosts(posts)  \n  }\n\n  useEffect(() => {\n    loadPosts()\n  }, [])\n\n  \n\n  useEffect(() => {\n    if (loadedPosts.length > 0 && !socketConnected) {\n      const url = 'wss://api2.aleph.im/api/ws0/messages?contentTypes=techmaker-posts'\n      /* need to update with my organizational endpoint ~ aleph */\n  \n      const connection = new WebSocket(url) \n  \n      connection.onmessage = (e) => { \n        let post = JSON.parse(e.data)\n        if (post.item_content && post.content.type == 'techmaker-posts') {\n\n          if (post.content.address == props.walletAddress) {\n            props.setModalOpen(false)\n          }\n          \n          const hash = post.item_hash\n\n          const alreadyLoaded = loadedPosts.some((element) => {\n            return element.item_hash == hash\n          })\n\n          if (!alreadyLoaded) {\n            setLoadedPosts(previousPosts => [post, ...previousPosts])\n          }\n        }\n      }\n\n      setSocketConnected(true)\n    }\n  }, [loadedPosts])\n\n  return (\n    <div className='posts'>\n      {/* <h1 className='mt-5 mb-4'>ðŸ‘‹ Hello!</h1> */}\n      { loadedPosts.map((post) => <Post key={post.item_hash} post={post} truncateAddress={props.truncateAddress} timeSince={props.timeSince} />)}\n    </div>    \n  );\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}