"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = secp256k1Sign;

var _elliptic = require("elliptic");

var _util = require("@polkadot/util");

var _hasher = _interopRequireDefault(require("./hasher"));

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const ec = new _elliptic.ec('secp256k1');
/**
 * @name secp256k1Sign
 * @description Returns message signature of `message`, using the supplied pair
 */

function secp256k1Sign(message, {
  secretKey
}, hashType = 'blake2') {
  (0, _util.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 32, 'Expected valid secp256k1 secretKey, 32-bytes');
  const key = ec.keyFromPrivate(secretKey);
  const ecsig = key.sign((0, _hasher.default)(hashType, message));
  return (0, _util.u8aConcat)((0, _util.bnToU8a)(ecsig.r, {
    bitLength: 256,
    isLe: false
  }), (0, _util.bnToU8a)(ecsig.s, {
    bitLength: 256,
    isLe: false
  }), new Uint8Array([ecsig.recoveryParam || 0]));
}