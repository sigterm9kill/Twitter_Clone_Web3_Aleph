"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = signatureVerify;

var _util = require("@polkadot/util");

var _decode = _interopRequireDefault(require("../address/decode"));

var _verify = _interopRequireDefault(require("../nacl/verify"));

var _verify2 = _interopRequireDefault(require("../schnorrkel/verify"));

var _verify3 = _interopRequireDefault(require("../secp256k1/verify"));

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const VERIFIERS_ECDSA = [['ecdsa', (message, signature, publicKey, isExpanded) => (0, _verify3.default)(message, signature, publicKey, 'blake2', isExpanded)], ['ethereum', (message, signature, publicKey, isExpanded) => (0, _verify3.default)(message, signature, publicKey, 'keccak', isExpanded)]];
const VERIFIERS = [['ed25519', _verify.default], ['sr25519', _verify2.default], ...VERIFIERS_ECDSA];
const CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];

function verifyDetect(result, message, signature, publicKey, isExpanded, verifiers = VERIFIERS) {
  result.isValid = verifiers.some(([crypto, verify]) => {
    try {
      if (verify(message, signature, publicKey, isExpanded)) {
        result.crypto = crypto;
        return true;
      }
    } catch (error) {// do nothing, result.isValid still set to false
    }

    return false;
  });
  return result;
}

function verifyMultisig(result, message, signature, publicKey, isExpanded) {
  (0, _util.assert)([0, 1, 2].includes(signature[0]), `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);
  const type = CRYPTO_TYPES[signature[0]] || 'none';
  result.crypto = type;

  try {
    result.isValid = {
      ecdsa: () => verifyDetect(result, message, signature.subarray(1), publicKey, isExpanded, VERIFIERS_ECDSA).isValid,
      ed25519: () => (0, _verify.default)(message, signature.subarray(1), publicKey),
      none: () => {
        throw Error('no verify for `none` crypto type');
      },
      sr25519: () => (0, _verify2.default)(message, signature.subarray(1), publicKey)
    }[type]();
  } catch (error) {// ignore, result.isValid still set to false
  }

  return result;
}

function signatureVerify(message, signature, addressOrPublicKey, isExpanded) {
  const signatureU8a = (0, _util.u8aToU8a)(signature);
  (0, _util.assert)([64, 65, 66].includes(signatureU8a.length), `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);
  const result = {
    crypto: 'none',
    isValid: false
  };
  const publicKey = (0, _decode.default)(addressOrPublicKey);
  return [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length) ? verifyMultisig(result, message, signatureU8a, publicKey, isExpanded) : verifyDetect(result, message, signatureU8a, publicKey, isExpanded);
}