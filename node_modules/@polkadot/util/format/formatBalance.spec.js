"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _bn = _interopRequireDefault(require("bn.js"));

var _formatBalance = _interopRequireDefault(require("./formatBalance"));

// Copyright 2017-2020 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
describe('formatBalance', () => {
  const TESTVAL = new _bn.default('123456789000');
  describe('SI formatting', () => {
    it('formats empty to 0', () => {
      expect((0, _formatBalance.default)()).toEqual('0');
      expect((0, _formatBalance.default)('0')).toEqual('0');
    });
    it('formats 123,456,789,000 (decimals=15)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        decimals: 15,
        withSi: true
      })).toEqual('123.4567 µUnit');
    });
    it('formats 123,456 (decimals=0)', () => {
      expect((0, _formatBalance.default)(123456, {
        decimals: 0,
        withSi: true
      })).toEqual('123.4560 kUnit');
    });
    it('formats BigInt numbers', () => {
      expect((0, _formatBalance.default)(123456789000n, {
        decimals: 15,
        withSi: true
      })).toEqual('123.4567 µUnit');
    });
    it('formats 123,456,789,000 (decimals=15, old style)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        withSi: true
      }, 15)).toEqual('123.4567 µUnit');
    });
    it('formats 123,456,789,000 (decimals=36, option)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        decimals: 36,
        withSi: true
      })).toEqual('0.1234 yUnit');
    });
    it('formats 123,456,789,000 (decimals=15, Compact)', () => {
      const compact = {
        something: 'else',
        toBn: () => TESTVAL,
        unwrap: () => TESTVAL
      };
      expect((0, _formatBalance.default)(compact, {
        decimals: 15,
        withSi: true
      })).toEqual('123.4567 µUnit');
    });
    it('formats 123,456,789,000 (decimals=12)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        decimals: 12,
        withSi: true
      })).toEqual('123.4567 mUnit');
    });
    it('formats 123,456,789,000 (decimals=9)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        withSi: true
      }, 9)).toEqual('123.4567 Unit');
    });
    it('formats 123,456,789,000 (decimals=9, no unit)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        withSi: true,
        withUnit: false
      }, 9)).toEqual('123.4567');
    });
    it('formats 123,456,789,000 (decimals=9, unit given)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        withSi: true,
        withUnit: 'FOO'
      }, 9)).toEqual('123.4567 FOO');
    });
    it('formats 123,456,789,000 (decimals=12, no SI)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        withSi: false
      }, 12)).toEqual('123.4567');
    });
    it('formats 123,456,789,000 (decimals=12, full SI)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        withSiFull: true
      }, 12)).toEqual('123.4567 milli Unit');
    });
    it('formats 123,456,789,000 (decimals=12, full SI, no unit)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        withSiFull: true,
        withUnit: false
      }, 12)).toEqual('123.4567 milli');
    });
    it('formats 123,456,789,000 (decimals=9, full SI)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        withSiFull: true
      }, 9)).toEqual('123.4567 Unit');
    });
    it('formats 123,456,789,000 (decimals=6)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        withSi: true
      }, 6)).toEqual('123.4567 kUnit');
    });
    it('formats 123,456,789,000 (decimals=6, unit specified)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        withSi: true,
        withUnit: 'BAR'
      }, 6)).toEqual('123.4567 kBAR');
    });
    it('formats 123,456,789,000 * 10 (decimals=12)', () => {
      expect((0, _formatBalance.default)(TESTVAL.muln(10), {
        withSi: true
      }, 12)).toEqual('1.2345 Unit');
    });
    it('formats 123,456,789,000 * 100 (decimals=12)', () => {
      expect((0, _formatBalance.default)(TESTVAL.muln(100), {
        withSi: true
      }, 12)).toEqual('12.3456 Unit');
    });
    it('formats 123,456,789,000 * 1000 (decimals=12)', () => {
      expect((0, _formatBalance.default)(TESTVAL.muln(1000), {
        withSi: true
      }, 12)).toEqual('123.4567 Unit');
    });
    it('formats -123,456,789,000 (decimals=15)', () => {
      expect((0, _formatBalance.default)(new _bn.default('-123456789000'), {
        withSi: true
      }, 15)).toEqual('-123.4567 µUnit');
    });
  });
  describe('Forced formatting', () => {
    it('formats 123,456,789,000 (decimals=12, forceUnit=base)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        forceUnit: '-'
      }, 12)).toEqual('0.1234 Unit');
    });
    it('formats 123,456,789,000 (decimals=9, forceUnit=base)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        forceUnit: '-'
      }, 9)).toEqual('123.4567 Unit');
    });
    it('formats 123,456,789,000 (decimals=7, forceUnit=base)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        forceUnit: '-'
      }, 7)).toEqual('12,345.6789 Unit');
    });
    it('formats 123,456,789,000 (decimals=15, forceUnit=µ)', () => {
      expect((0, _formatBalance.default)(TESTVAL, {
        forceUnit: 'µ'
      }, 15)).toEqual('123.4567 µUnit');
    });
  });
  describe('calcSi', () => {
    it('exposes calcSi on formatBalance', () => {
      expect(_formatBalance.default.calcSi('12345').value).toEqual('k');
    });
  });
  describe('findSi', () => {
    it('finds the SI value', () => {
      expect(_formatBalance.default.findSi('k')).toEqual({
        power: 3,
        text: 'Kilo',
        value: 'k'
      });
    });
    it('returns default on not found', () => {
      expect(_formatBalance.default.findSi('blah')).toEqual({
        power: 0,
        text: 'Unit',
        value: '-'
      });
    });
  });
  describe('defaults', () => {
    it('returns defaults', () => {
      expect(_formatBalance.default.getDefaults()).toEqual({
        decimals: 0,
        unit: 'Unit'
      });
    });
    it('formats 123,456,789,000 (defaultDecimals=12)', () => {
      _formatBalance.default.setDefaults({
        decimals: 12
      });

      expect((0, _formatBalance.default)(TESTVAL)).toEqual('123.4567 mUnit');
    });
    it('formats 123,456,789,000 (defaultUnit=TEST)', () => {
      _formatBalance.default.setDefaults({
        unit: 'TEST'
      });

      expect((0, _formatBalance.default)(TESTVAL)).toEqual('123.4567 mTEST');
    });
  });
  it('returns options for dropdown', () => {
    _formatBalance.default.setDefaults({
      decimals: 0,
      unit: 'TEST'
    });

    expect(_formatBalance.default.getOptions()).toEqual([{
      power: 0,
      text: 'TEST',
      value: '-'
    }, {
      power: 3,
      text: 'Kilo',
      value: 'k'
    }, {
      power: 6,
      text: 'Mega',
      value: 'M'
    }, {
      power: 9,
      text: 'Giga',
      value: 'G'
    }, {
      power: 12,
      text: 'Tera',
      value: 'T'
    }, {
      power: 15,
      text: 'Peta',
      value: 'P'
    }, {
      power: 18,
      text: 'Exa',
      value: 'E'
    }, {
      power: 21,
      text: 'Zeta',
      value: 'Z'
    }, {
      power: 24,
      text: 'Yotta',
      value: 'Y'
    }]);
  });
});